// Code generated by mockery v2.33.0. DO NOT EDIT.

package ports

import (
	models "challenge-verifymy/core/models"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockUserService is an autogenerated mock type for the UserService type
type MockUserService struct {
	mock.Mock
}

type MockUserService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserService) EXPECT() *MockUserService_Expecter {
	return &MockUserService_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, user
func (_m *MockUserService) Create(ctx context.Context, user *models.UserReq) (*models.UserRes, error) {
	ret := _m.Called(ctx, user)

	var r0 *models.UserRes
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.UserReq) (*models.UserRes, error)); ok {
		return rf(ctx, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.UserReq) *models.UserRes); ok {
		r0 = rf(ctx, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.UserRes)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.UserReq) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserService_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockUserService_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - user *models.UserReq
func (_e *MockUserService_Expecter) Create(ctx interface{}, user interface{}) *MockUserService_Create_Call {
	return &MockUserService_Create_Call{Call: _e.mock.On("Create", ctx, user)}
}

func (_c *MockUserService_Create_Call) Run(run func(ctx context.Context, user *models.UserReq)) *MockUserService_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.UserReq))
	})
	return _c
}

func (_c *MockUserService_Create_Call) Return(res *models.UserRes, err error) *MockUserService_Create_Call {
	_c.Call.Return(res, err)
	return _c
}

func (_c *MockUserService_Create_Call) RunAndReturn(run func(context.Context, *models.UserReq) (*models.UserRes, error)) *MockUserService_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, ID
func (_m *MockUserService) Delete(ctx context.Context, ID string) error {
	ret := _m.Called(ctx, ID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, ID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUserService_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockUserService_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - ID string
func (_e *MockUserService_Expecter) Delete(ctx interface{}, ID interface{}) *MockUserService_Delete_Call {
	return &MockUserService_Delete_Call{Call: _e.mock.On("Delete", ctx, ID)}
}

func (_c *MockUserService_Delete_Call) Run(run func(ctx context.Context, ID string)) *MockUserService_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUserService_Delete_Call) Return(_a0 error) *MockUserService_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserService_Delete_Call) RunAndReturn(run func(context.Context, string) error) *MockUserService_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Read provides a mock function with given fields: ctx, ID
func (_m *MockUserService) Read(ctx context.Context, ID string) (*models.UserRes, error) {
	ret := _m.Called(ctx, ID)

	var r0 *models.UserRes
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.UserRes, error)); ok {
		return rf(ctx, ID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.UserRes); ok {
		r0 = rf(ctx, ID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.UserRes)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserService_Read_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Read'
type MockUserService_Read_Call struct {
	*mock.Call
}

// Read is a helper method to define mock.On call
//   - ctx context.Context
//   - ID string
func (_e *MockUserService_Expecter) Read(ctx interface{}, ID interface{}) *MockUserService_Read_Call {
	return &MockUserService_Read_Call{Call: _e.mock.On("Read", ctx, ID)}
}

func (_c *MockUserService_Read_Call) Run(run func(ctx context.Context, ID string)) *MockUserService_Read_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUserService_Read_Call) Return(_a0 *models.UserRes, _a1 error) *MockUserService_Read_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserService_Read_Call) RunAndReturn(run func(context.Context, string) (*models.UserRes, error)) *MockUserService_Read_Call {
	_c.Call.Return(run)
	return _c
}

// ReadAll provides a mock function with given fields: ctx
func (_m *MockUserService) ReadAll(ctx context.Context) (*[]models.UserRes, error) {
	ret := _m.Called(ctx)

	var r0 *[]models.UserRes
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*[]models.UserRes, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *[]models.UserRes); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]models.UserRes)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserService_ReadAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadAll'
type MockUserService_ReadAll_Call struct {
	*mock.Call
}

// ReadAll is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockUserService_Expecter) ReadAll(ctx interface{}) *MockUserService_ReadAll_Call {
	return &MockUserService_ReadAll_Call{Call: _e.mock.On("ReadAll", ctx)}
}

func (_c *MockUserService_ReadAll_Call) Run(run func(ctx context.Context)) *MockUserService_ReadAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockUserService_ReadAll_Call) Return(_a0 *[]models.UserRes, _a1 error) *MockUserService_ReadAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserService_ReadAll_Call) RunAndReturn(run func(context.Context) (*[]models.UserRes, error)) *MockUserService_ReadAll_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, ID, user
func (_m *MockUserService) Update(ctx context.Context, ID string, user *models.UserReq) (*models.UserRes, error) {
	ret := _m.Called(ctx, ID, user)

	var r0 *models.UserRes
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *models.UserReq) (*models.UserRes, error)); ok {
		return rf(ctx, ID, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *models.UserReq) *models.UserRes); ok {
		r0 = rf(ctx, ID, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.UserRes)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *models.UserReq) error); ok {
		r1 = rf(ctx, ID, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserService_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockUserService_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - ID string
//   - user *models.UserReq
func (_e *MockUserService_Expecter) Update(ctx interface{}, ID interface{}, user interface{}) *MockUserService_Update_Call {
	return &MockUserService_Update_Call{Call: _e.mock.On("Update", ctx, ID, user)}
}

func (_c *MockUserService_Update_Call) Run(run func(ctx context.Context, ID string, user *models.UserReq)) *MockUserService_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*models.UserReq))
	})
	return _c
}

func (_c *MockUserService_Update_Call) Return(_a0 *models.UserRes, _a1 error) *MockUserService_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserService_Update_Call) RunAndReturn(run func(context.Context, string, *models.UserReq) (*models.UserRes, error)) *MockUserService_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUserService creates a new instance of MockUserService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserService {
	mock := &MockUserService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
