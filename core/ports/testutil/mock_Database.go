// Code generated by mockery v2.33.0. DO NOT EDIT.

package ports

import (
	ports "challenge-verifymy/core/ports"

	mock "github.com/stretchr/testify/mock"
)

// MockDatabase is an autogenerated mock type for the Database type
type MockDatabase struct {
	mock.Mock
}

type MockDatabase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDatabase) EXPECT() *MockDatabase_Expecter {
	return &MockDatabase_Expecter{mock: &_m.Mock}
}

// Disconnected provides a mock function with given fields:
func (_m *MockDatabase) Disconnected() <-chan struct{} {
	ret := _m.Called()

	var r0 <-chan struct{}
	if rf, ok := ret.Get(0).(func() <-chan struct{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan struct{})
		}
	}

	return r0
}

// MockDatabase_Disconnected_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Disconnected'
type MockDatabase_Disconnected_Call struct {
	*mock.Call
}

// Disconnected is a helper method to define mock.On call
func (_e *MockDatabase_Expecter) Disconnected() *MockDatabase_Disconnected_Call {
	return &MockDatabase_Disconnected_Call{Call: _e.mock.On("Disconnected")}
}

func (_c *MockDatabase_Disconnected_Call) Run(run func()) *MockDatabase_Disconnected_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDatabase_Disconnected_Call) Return(_a0 <-chan struct{}) *MockDatabase_Disconnected_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatabase_Disconnected_Call) RunAndReturn(run func() <-chan struct{}) *MockDatabase_Disconnected_Call {
	_c.Call.Return(run)
	return _c
}

// GetRepository provides a mock function with given fields: name
func (_m *MockDatabase) GetRepository(name string) ports.UserRepository {
	ret := _m.Called(name)

	var r0 ports.UserRepository
	if rf, ok := ret.Get(0).(func(string) ports.UserRepository); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ports.UserRepository)
		}
	}

	return r0
}

// MockDatabase_GetRepository_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRepository'
type MockDatabase_GetRepository_Call struct {
	*mock.Call
}

// GetRepository is a helper method to define mock.On call
//   - name string
func (_e *MockDatabase_Expecter) GetRepository(name interface{}) *MockDatabase_GetRepository_Call {
	return &MockDatabase_GetRepository_Call{Call: _e.mock.On("GetRepository", name)}
}

func (_c *MockDatabase_GetRepository_Call) Run(run func(name string)) *MockDatabase_GetRepository_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockDatabase_GetRepository_Call) Return(_a0 ports.UserRepository) *MockDatabase_GetRepository_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDatabase_GetRepository_Call) RunAndReturn(run func(string) ports.UserRepository) *MockDatabase_GetRepository_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDatabase creates a new instance of MockDatabase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDatabase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDatabase {
	mock := &MockDatabase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
